// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User modal can be updated as the application grows
model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  shoppingLists ShoppingList[]
}

model ShoppingList {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  items     ShoppingItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @db.ObjectId

  @@index([title])
}

model ShoppingItem {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  quantity Int
  active   Boolean

  ShoppingList   ShoppingList? @relation(fields: [shoppingListId], references: [id])
  shoppingListId String?       @db.ObjectId
}

// The folowing models are required for next-auth to work
// Do Not Change.
// Necessary for Next auth
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Necessary for Next auth
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
